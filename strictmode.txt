//What the fuck does strictmode do
// checks for unsafe life cycles
// compiles a list of all class components using the unsafe life cycles
// warning about legacy string ref API usage - legacy in this regard means old
// prevously there were two types of refs
// string refs and callbacks
// strings were the more convenient of the two
// but they have several downsides
// a third option was added in REact 16.3 that removes the downsides from the string refs
// object refs are a string ref replacement
// strict mode will warn about string refs
//Warning about deprecated findDOMNode usage
  //react used to support findDOMNode to search the tree for a
  // DOM Node given a class instance.
  // it can be used on class components
  // this breaks abstraction levels by allowing a parent to
  // demand that certain children were rendered.
  // creates a refactoring hazard where you cant change implementation details
  // of a component because a parent might be reaching into its DOM node.
//Detecting unexpected side effects
  //Conceptually, react works in 2 phases
    //The render phase - determines changes that need to be made to the DOM.
    // react calls render and then compares the result to the previous render 
    // the commit phase - applies the changes
  //New upcoming phase- the concurrent phase, will split the render phase into parts
  // pausing and resuming to avoid blocking the browser
  // react may invoke render phase lifecycles more than one before committing
  // Because certain methods may be called more than once
  // it is important that they do not contain side-effects
//Detecting Legacy  context API
// Ensuring reusable state
  //